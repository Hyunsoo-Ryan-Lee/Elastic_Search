GET _search
{
  "query": {
    "match_all": {}
  }
}

GET _search
{
  "query": {
    "match_all": {}
  }
}

POST hello_index/_doc/1
{
  "message" : "힙합",
  "name" : "NAS"
}

# select와 동일한 검색

# data 수정
PUT  hello_index/_doc/1
{
  "message" : "이현수"
}
DELETE  hello_index/_doc/1

# 삭제 후 검색 >> found는 False
GET  hello_index/_doc/1


POST dontknow/_doc/1
{
  "employees":[
  { "firstName":"John", "lastName":"Doe" },
  { "firstName":"Anna", "lastName":"Smith" },
  { "firstName":"Peter", "lastName":"Jones" }
  ]
}

# 다량의 data 저장시에는 index값을 사전에 설정 권장
POST _bulk
{ "index" : { "_index" : "employees2"} }
{ "firstName":"John", "lastName":"Doe" }
{ "index" : { "_index" : "employees", "_id" : "2" } }
{ "firstName":"Anna", "lastName":"Smith" }
{ "index" : { "_index" : "employees", "_id" : "3" } }
{ "firstName":"Peter", "lastName":"Jones" }

# oracle의 desc employees
GET employees

# select * from employees where lastName='Smith'
GET employees/_search/?q=Smith



# account table 생성 및 data 저장
# ID가 4인 경우 data 누락임에도 다른 data 정상 저장
POST _bulk
{"index":{"_index":"account", "_id":"1"}}
{"account_number":1,"balance":3926,"firstname":"Amber","lastname":"Duke","age":7,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}
{"index":{"_index":"account", "_id":"2"}}
{"account_number":2,"balance":5282,"firstname":"Hattie","lastname":"Bond","age":7,"gender":"M","address":"271 Bristol Street","employer":"Netagy","email":"hattiebond@netagy.com","city":"Dante","state":"TN"}
{"index":{"_index":"account", "_id":"3"}}
{"account_number":3,"balance":7838,"firstname":"Nanette","lastname":"Bates","age":28,"gender":"F","address":"789 Madison Street","employer":"Quility","email":"nanettebates@quility.com","city":"Nogal","state":"VA"}
{"index":{"_index":"account", "_id":"4"}}

GET account

# 'F'값을 보유하고 있는 data 검색
GET account/_search/?q=F

# gender을 지정해서 검색
GET account/_search/?q=gender:M

# gender와 state 두 조건을 검색
GET account/_search/?q=gender:M AND state:IL

# 또 다른 검색 방법
GET account/_search
{
  "query": {
    "match": {
      "gender": "F"
    }
  }
}


DELETE my_index
POST my_index/_bulk
{"index":{"_id":1}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를"}
{"index":{"_id":2}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 나는 괴로워했다"}
{"index":{"_id":3}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 너는 괴로워했다"}
{"index":{"_id":4}}
{"message":"chrome google Chrome Google"}
{"index":{"_id":5}}
{"message":"하늘사 Google Chrome"}
{"index":{"_id":6}}
{"message":"pink"}
{"index":{"_id":7}}
{"message":"pinkRed"}
{"index":{"_id":8}}
{"message":"pink red blue"}
{"index":{"_id":9}}
{"message":"pink red blue black"}
{"index":{"_id":10}}
{"message":"pink red blue black green"}
{"index":{"_id":11}}
{"message":"pink blue red black green"}
{"index":{"_id":12}}
{"message":"pink pink"}
{"index":{"_id":13}}
{"message":"pink black pink green blue red black green"}


# desc my_index와 흡사
GET my_index

GET my_index/_search

# id가 1인 row만 검색
GET my_index/_doc/1


# Chrome Google이 포함된 문서 검색
# 모든 단어가 term으로 구성되어 역indexing
# 이 형식 또한 chrome과 google로 구분이 되어 개별로 저장
# 따라서 Chrome Google로 검색해도 각 문자로 개별로 검색
# 순서는 중요하지 않고 포함된 data 검색

# select * from my_index where message='Chrome' or message='Google'; 와 흡사
GET my_index/_search
{
  "query": {
    "match": {
        "message": "Chrome Google"
    }
  }
}


# pinkRed 이런 단일 문자 내에 포함된 단어는 포함 안됨
GET my_index/_search
{
  "query": {
    "match": {
        "message": "pink green"
    }
  }
}


# 검색 옵션 추가 >> query에 term 사이에 특정 term 개수 고정
GET my_index/_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "pink red",
        "slop": 1
      }
    }
  }
}

# slop >> query 단어들 사이에 올 수 있는 문자 개수를 의미(0~n개 사이)
GET my_index/_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "pink red",
        "slop": 3
      }
    }
  }
}


# match >> red pink 순서 상관없이 있기만 하면 검색
GET my_index/_search
{
  "query": {
    "match": {
      "message": {
        "query": "red pink"
      }
    }
  }
}

# match_phrase 일때는 pink red 순서가 바뀌지 않고 검색
GET my_index/_search
{
  "query": {
    "match_phrase": {
      "message": {
        "query": "pink red",
        "slop": 3
      }
    }
  }
}

# bool query - must/must_not/should/filter
GET my_index/_search

# score 속성값에 대한 정확도 rank 확인
GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink black"
    }
  }
}


GET my_index/_search
{
  "query": {
    "match": {
      "message": "*pink*"
    }
  }
}


GET my_index/_search
{
  "query": {
    "match": {
      "message": "pink blue"
    }
  }
}


# should >> 일치하는 검색 결과의 점수를 더 높게 배정하는 방법
# must >> 참인 결과값 검색
GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "pink blue"
          }
        }
      ],
      "should": [
        {
          "match_phrase": {
            "message": "pink blue"
          }
        }
      ]
    }
  }
}


# 03 - filter : 참인 문서를 검색, 단 score은 계산하지 않음

GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "google"
          }
        }
      ]
    }
  }
}


GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "google"
          }
        }
      ],
      "filter": [
        {
          "bool": {
            "must_not": [
              {
                "match" : {
                  "message": "하늘사"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

GET my_index/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "google"
          }
        }
      ],
      "filter": [
        {
          "bool": {
            "must_not":[
              {
                "match" : {
                  "message" : "하늘사"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

# ES의 상태 체크하는 명령
GET /_cluster/health

# 검색시 기본적으로 10개의 doc만 검색되는 부분 해소 옵션
GET my_index/_search
{
  "size": 10
}


DELETE account
PUT _bulk
{"index":{"_index":"account","_id":"1"}}
{"account_number":1,"balance":3926,"firstname":"Amber","lastname":"Duke","age":7,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}
{"index":{"_index":"account","_id":"2"}}
{"account_number":2,"balance":5282,"firstname":"Hattie","lastname":"Bond","age":7,"gender":"M","address":"271 Bristol Street","employer":"Netagy","email":"hattiebond@netagy.com","city":"Dante","state":"TN"}
{"index":{"_index":"account","_id":"3"}}
{"account_number":3,"balance":7838,"firstname":"Nanette","lastname":"Bates","age":28,"gender":"F","address":"789 Madison Street","employer":"Quility","email":"nanettebates@quility.com","city":"Nogal","state":"VA"}
{"index":{"_index":"account","_id":"4"}}
{"account_number":4,"balance":440,"firstname":"Dale","lastname":"Adams","age":33,"gender":"M","address":"427 Hutchinson Court","employer":"Boink","email":"daleadams@boink.com","city":"Orick","state":"MD"}
{"index":{"_index":"account","_id":"5"}}
{"account_number":5,"balance":1244,"firstname":"Elinor","lastname":"Ratliff","age":7,"gender":"M","address":"282 Kings Place","employer":"Scentric","email":"elinorratliff@scentric.com","city":"Ribera","state":"WA"}
{"index":{"_index":"account","_id":"6"}}
{"account_number":6,"balance":40540,"firstname":"Virginia","lastname":"Ayala","age":39,"gender":"F","address":"171 Putnam Avenue","employer":"Filodyne","email":"virginiaayala@filodyne.com","city":"Nicholson","state":"PA"}
{"index":{"_index":"account","_id":"7"}}
{"account_number":7,"balance":48082,"firstname":"Dillard","lastname":"Mcpherson","age":34,"gender":"F","address":"702 Quentin Street","employer":"Quailcom","email":"dillardmcpherson@quailcom.com","city":"Veguita","state":"IN"}

GET account
GET account/_search
# gte[greater than or equal : 이상]
# gt[greater than] - 초과
# lte[Less than or equal] - 이하
# lt[less than] - 미만

# age 값이 20이상 30미만인 자료들 검색
GET account/_search
{
  "query": {
    "range": {
      "age": {
        "gte": 30,
        "lt": 40
      }
    }
  }
}

# balance가 4000 이상인 자료 검색
GET account/_search
{
  "query": {
    "range": {
      "balance": {
        "gte": 4000
      }
    }
  }
}


# 기존까지는 data로 index(table) 직접 생성
# movie_search는 구조부터 직접 생성
# POST >> 수정 권장, PUT >> 새로 생성 권장
PUT movie_search
{
  "mappings": {
    "properties": {
      "movieCd": {
        "type": "keyword"
      },
      "movieNm": {
        "type": "text",
        "analyzer": "standard"
      },
      "movieNmEn": {
        "type": "text",
        "analyzer": "standard"
      },
      "prdtYear": {
        "type": "integer"
      },
      "openDt": {
        "type": "integer"
      },
      "typeNm": {
        "type": "keyword"
      },
      "prdtStatNm": {
        "type": "keyword"
      },
      "nationAlt": {
        "type": "keyword"
      },
      "genreAlt": {
        "type": "keyword"
      },
      "repNationNm": {
        "type": "keyword"
      },
      "repGenreNm": {
        "type": "keyword"
      },
      "companies": {
        "properties": {
          "companyCd": {
            "type": "keyword"
          },
          "companyNm": {
            "type": "keyword"
          }
        }
      },
      "directors": {
        "properties": {
          "peopleNm": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

GET movie_search/_search







# 요청
PUT movie_search/_doc/1
{
  "movieCd": "20173732",
  "movieNm": "살아남은 아이",
  "movieNmEn": "Last Child",
  "prdtYear": "2017",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "드라마,가족",
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "신동석"
    }
  ],
  "companies": []
}

PUT movie_search/_doc/2
{
  "movieCd": "20190901",
  "movieNm": "나쁜 녀석들",
  "movieNmEn": "bad nums",
  "prdtYear": "2019",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "영화,조폭",
  "repNationNm": "한국",
  "repGenreNm": "영화",
  "directors": [
    {
      "peopleNm": "마동석"
    }
  ],
  "companies": []
}


PUT movie_search/_doc/3
{
  "movieCd": "20190601",
  "movieNm": "기생충",
  "movieNmEn": "parasite",
  "prdtYear": "2018",
  "openDt": "2019",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "영화,사회,가족",
  "repNationNm": "한국",
  "repGenreNm": "영화",
  "directors": [
    {
      "peopleNm": "송강호"
    }
  ],
  "companies": []
}


PUT movie_search/_doc/4
{
  "movieCd": "20180789",
  "movieNm": "한 솔로: 스타워즈 스토리",
  "movieNmEn": "Solo: A Star Wars Story",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "미국",
  "genreAlt": "",
  "repNationNm": "미국",
  "repGenreNm": "",
  "directors": [
    {
      "peopleNm": "론 하워드"
    }
  ],
  "companys": []
}



PUT movie_search/_doc/5
{
  "movieCd": "20177478",
  "movieNm": "어벤져스: 인피니티 워",
  "movieNmEn": "Avengers: Infinity War",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "어드벤처",
    "판타지",
    "SF"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "안소니 루소"
    },
    {
      "peopleNm": "조 루소"
    }
  ],
  "companys": []
}

PUT movie_search/_doc/6
{
  "movieCd": "20176848",
  "movieNm": "데드풀2",
  "movieNmEn": "DEADPOOL2",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "어드벤처",
    "코미디",
    "SF"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "데이빗 레이치"
    }
  ],
  "companys": []
}

PUT movie_search/_doc/7
{
  "movieCd": "20189661",
  "movieNm": "2018 한국영화아카데미 34기 졸업영화제 섹션A",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/8
{
  "movieCd": "20180482",
  "movieNm": "잊혀진 이야기\t",
  "movieNmEn": "Forgotten Saga",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/9
{
  "movieCd": "20180566",
  "movieNm": "2월 수요단편극장- 김태용 감독 특별전",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [
    {
      "peopleNm": "김태용"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/10
{
  "movieCd": "20180501",
  "movieNm": "관계의 의미",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "옴니버스",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "기타"
  ],
  "repNationNm": "한국",
  "repGenreNm": "기타",
  "directors": [],
  "companys": []
}


PUT movie_search/_doc/11
{
  "movieCd": "20178395",
  "movieNm": "12 솔져스",
  "movieNmEn": "12 Strong",
  "prdtYear": "2018",
  "openDt": "20180131",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt": "미국",
  "genreAlt": [
    "액션",
    "드라마",
    "전쟁"
  ],
  "repNationNm": "미국",
  "repGenreNm": "액션",
  "directors": [
    {
      "peopleNm": "니콜라이 퓰시"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/12
{
  "movieCd": "20137706",
  "movieNm": "패밀리",
  "movieNmEn": "Family",
  "prdtYear": "2012",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "드라마"
  ],
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "정욱"
    }
  ],
  "companys": []
}



PUT movie_search/_doc/13
{
  "movieCd": "20155408",
  "movieNm": "가족",
  "movieNmEn": "Family",
  "prdtYear": "2015",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "드라마"
  ],
  "repNationNm": "한국",
  "repGenreNm": "드라마",
  "directors": [
    {
      "peopleNm": "정승현"
    }
  ],
  "companys": []
}


PUT movie_search/_doc/14
{
  "movieCd": "20137027",
  "movieNm": "패밀리 ",
  "movieNmEn": "family",
  "prdtYear": "2011",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "애니메이션"
  ],
  "repNationNm": "한국",
  "repGenreNm": "애니메이션",
  "directors": [],
  "companys": []
}



PUT movie_search/_doc/15
{
  "movieCd": "20127686",
  "movieNm": "가족",
  "movieNmEn": "Family",
  "prdtYear": "1976",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": [
    "멜로",
    "로맨스"
  ],
  "repNationNm": "한국",
  "repGenreNm": "멜로/로맨스",
  "directors": [
    {
      "peopleNm": "이혁수"
    }
  ],
  "companys": [
    {
      "companyCd": "20101024",
      "companyNm": "대영영화주식회사"
    }
  ]
}


PUT movie_search/_doc/16
{
  "movieCd": "20138634",
  "movieNm": "Family",
  "movieNmEn": "Family",
  "prdtYear": "2012",
  "openDt": "",
  "typeNm": "단편",
  "prdtStatNm": "기타",
  "nationAlt": "한국",
  "genreAlt": "",
  "repNationNm": "한국",
  "repGenreNm": "",
  "directors": [],
  "companys": []
}

PUT movie_search/_doc/17
{
  "movieCd": "20174169",
  "movieNm": "기묘한 가족",
  "movieNmEn": "",
  "prdtYear": "2017",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "후반작업",
  "nationAlt": "한국",
  "genreAlt": [
    "코미디"
  ],
  "repNationNm": "한국",
  "repGenreNm": "코미디",
  "directors": [
    {
      "peopleNm": "이민재"
    }
  ],
  "companys": [
    {
      "companyCd": "20142551",
      "companyNm": "씨네주 유한회사"
    }
  ]
}
PUT movie_search/_doc/18
{
  "movieCd": "20020233",
  "movieNm": "패밀리",
  "movieNmEn": "Family",
  "prdtYear": "2002",
  "openDt": "20020822",
  "typeNm": "장편",
  "prdtStatNm": "개봉",
  "nationAlt": "한국",
  "genreAlt": [
    "코미디"
  ],
  "repNationNm": "한국",
  "repGenreNm": "코미디",
  "directors": [
    {
      "peopleNm": "최진원"
    }
  ],
  "companys": [
    {
      "companyCd": "20100217",
      "companyNm": "(주)배우마을"
    }
  ]
}


GET movie_search
GET movie_search/_search
{
  "size": 20,
  "query": {
    "match_all": {
      "movieNm": "기묘한 가족"
    }
  }
}

# 기묘한 가족 >> 검색결과 3개의 결과가 나옴
# movieNm 필드의 type >> text이므로 기묘한, 가족을 term으로 구분해서 저장
GET movie_search/_search
{
  "size": 20,
  "query": {
    "match": {
      "movieNm": "기묘한 가족"
    }
  }
}

# multi_match >> 여러개의 field 대상으로 검색
# "movieNm","movieNmEn" 이 두 필드에 "가족"이 있는 자료들 검색
GET movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "나쁜",
      "fields": ["movieNm","movieNmEn"]
    }
  }
}



# 대표 장르가 '코미디', 제작 국가 '한국'인 영화 중 '단편'이 아닌 결과값 찾음
GET movie_search/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "repGenreNm": {
              "value": "코미디"
            }
          }
        },
        {
          "match": {
            "repNationNm": "한국"
          }
        }
      ],
      "must_not": [
        {"match": {
          "typeNm": "단편"
        }}
      ]
    }
  }
}


# prefix query >> 전체를 입력하지 않아도 괜찮음

GET movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": {
        "value": "살"
      }
    }
  }
}

GET movie_search/_mapping

# openDt 필드 값만 검색
GET movie_search/_search
{
  "size": 20,
  "_source": "openDt"
}


# openDt 필드에 null이 아닌 결과들 찾음
GET movie_search/_search
{
  "_source": "openDt",
  "query": {
    "exists": {
      "field": "openDt"
    }
  }
}

# 장르 구분해서 검색
# wildcard를 이용해서 검색
# * : 0~무한대  /  + : 1~무한대  /  ? : 없거나 하나이거나 (ES에서는 철자 하나 의미)
GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value":"장?"
      }
    }
  }
}

# 장?? >> 장으로 시작하는 세 글자이므로 결과값 안나옴
GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value":"장??"
      }
    }
  }
}


GET movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": {
        "value": "옴*"
      }
    }
  }
}


DELETE string_index
PUT string_index
{
  "mappings": {
    "properties": {
      "data1" : {
        "type": "text"
      },
      "data2" : {
        "type": "keyword"
      }
    }
  }
}
GET string_index/_mapping
POST string_index/_doc/1
{
  "data1":"pink red blue",
  "data2":"pink red blue"
}
GET string_index/_search
{
  "query": {
    "match": {
      "data1": "pink"
    }
  }
}
# keyword 타입으로 term 단위로 검색 시도시 검색 불가(text 타입이면 가능)
GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink"
    }
  }
}
GET string_index/_search
{
  "query": {
    "match": {
      "data2": "pink red blue"
    }
  }
}

GET my_index/_search
{
  "query": {
    "match_all": {
     
    }
  }
}


# text라는 속성에 부여된 data값을 whitespace 기준으로 분리
# 분리된 term을 소문자 >> 불용어 제거 >> ~s, ~ing 등이 포함된 문구로 검색해도 검색되게 해주는 작업(text 분석)
#분석기 이해를 위한 test 코드
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop",
    "snowball"
  ]
}

# 여백을 기준으로 나뉘어진 term들을 모두 다 소문자로 변환
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase"
  ]
}


# stop >> 중간에 있는 the, to 등의 조사들을 삭제(맨 앞에 The 같은 녀석들은 불용어로 처리 안됨)
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "stop"
  ]
}


# "lowercase" 먼저 쓰면 맨 앞에 The가 소문자가 되어 뒤에 stop 돌리면 제거됨
# stop 먼저 쓰면 맨 앞 The가 살아남아 뒤에 lowercase이 돌아 소문자로 변함
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "lowercase",
    "stop"
  ]
}


# snowball >> 검색시 기본어로 변환되어 검색
# Articles >> Articl / Tutorials >> Tutori 등등
GET _analyze
{
  "text": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS",
  "tokenizer": "whitespace",
  "filter": [
    "snowball"
  ]
}

# index에 분석기 적용
DELETE my_index

# my_index라는 table에 message라는 컬럼 생성, 타입은 text
PUT my_index
{
  "mappings": {
    "properties": {
      "message":{
        "type": "text",
        "analyzer": "snowball"
      }
    }
  }
}

# my_index에 data 저장
# id = 1dls doc에 새로 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

GET my_index/_search

# programming이라는 단어로 해당 문서 검색

GET my_index/_search
{
  "query": {
    "match": {
      "message": "programming"
    }
  }
}

# parses로 검색

GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}

# 사용자 정의 analyzer 개발
# 분석기만 사용자 정의로 선언, field 생성 및 세팅은 X
# 소문자(my1) >> 불용어(my2) 순서로 개발
DELETE my_index

# lowercase 분석기
PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  }
}

GET my_index/_search
GET my_index/_mapping

# 실시간 데이터를 my_index에게 적용하면서 분석

GET my_index/_analyze
{
  "analyzer": "my1",
  "text": [
    "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS"
  ]
}

GET my_index/_doc/2
GET my_index/_analyze
{
  "analyzer": "my1"
  , "text": "message"
}

DELETE my_index

# snowball이 적용된 상태에서 parses로 검색시 parse가 존재할 경우 자동 검색 적용이 안되는 상태
# parses로 검색시에도 parse 즉 snowball이 적용되게 하기 위한 마무리 

PUT my_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "my1": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "lowercase"
            ]
          },
          "my2": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "stop"
            ]
          },
          "my3": {
            "type": "custom",
            "tokenizer": "whitespace",
            "filter": [
              "snowball"
            ]
          }
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "message": {
        "type": "text",
        "analyzer": "my3"
      }
    }
  }
}

GET my_index/_mapping

# my_index에 실data 저장
PUT my_index/_doc/1
{
 "message": "If you parse the JSON string with a JavaScript program, you can access the data as an object" 
}

PUT my_index/_doc/2
{
 "message": "The Articles and Tutorials section features in-depth documents designed to give practical help to developers working with AWS" 
}

GET my_index/_search

# message field에 parse가 포함된 data 검색

# 위에서 정의한 my3를 mapping 해줬기 때문에 parse, parses 모두 검색됨
GET my_index/_search
{
  "query": {
    "match": {
      "message": "parses"
    }
  }
}


# 직접 data들 넣기

DELETE account
GET account/_search
GET bank/_search

PUT my_stations/_bulk
{"index": {"_id": "1"}}
{"date": "2020-06-01", "line": "1호선", "station": "종각", "passangers": 2314}
{"index": {"_id": "2"}}
{"date": "2020-06-01", "line": "2호선", "station": "강남", "passangers": 5412}
{"index": {"_id": "3"}}
{"date": "2020-07-10", "line": "2호선", "station": "강남", "passangers": 6221}
{"index": {"_id": "4"}}
{"date": "2020-07-15", "line": "2호선", "station": "강남", "passangers": 6478}
{"index": {"_id": "5"}}
{"date": "2020-08-07", "line": "2호선", "station": "강남", "passangers": 5821}
{"index": {"_id": "6"}}
{"date": "2020-08-18", "line": "2호선", "station": "강남", "passangers": 5724}
{"index": {"_id": "7"}}
{"date": "2020-09-02", "line": "2호선", "station": "신촌", "passangers": 3912}
{"index": {"_id": "8"}}
{"date": "2020-09-11", "line": "3호선", "station": "양재", "passangers": 4121}
{"index": {"_id": "9"}}
{"date": "2020-09-20", "line": "3호선", "station": "홍제", "passangers": 1021}
{"index": {"_id": "10"}}
{"date": "2020-10-01", "line": "3호선", "station": "불광", "passangers": 971}

GET my_stations/_mapping


# 강남 passangers수 sum 출력
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "aggs": {
    "sum_all": {
      "sum": {
        "field": "passangers"
      }
    }
  }
}


# station 강남인 목록 생략하고 집계 data field만 출력
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "size": 0, 
  "aggs": {
    "sum_all": {
      "avg": {
        "field": "passangers"
      }
    }
  }
}

# 전체 data들에 대한 총 집계
GET my_stations/_search
{
  "size": 1,
  "aggs": {
    "pass_station": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

# 강남역에 대한 총 집계 구함
GET my_stations/_search
{
  "query": {
    "match": {
      "station": "강남"
    }
  },
  "size": 0, 
  "aggs": {
    "pass_station": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}



GET my_stations/_search
{
  "query": {
    "match": {
      "line": "3호선"
    }
  },
  "size": 0, 
  "aggs": {
    "pass_station": {
      "stats": {
        "field": "passangers"
      }
    }
  }
}

# 호선 개수 카운팅(1호선, 2호선, 3호선)
# 유니크한 data 검색시에는 term으로 구분되어 있는 data값을 keyword로 간주해서 처리
# cradinality : 유니크한 data counting
GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "hahaha": {
      "cardinality": {
        "field": "line.keyword"
      }
    }
  }
}

GET my_stations/_mapping

GET my_stations/_search
{
  "size": 0,
  "aggs": {
    "hohoho": {
      "cardinality": {
        "field": "station.keyword"
      }
    }
  }
}

#국민은행 지점별 customers 출력
GET bank/_search
{
  "query": {
    "match": {
      "bank": "국민은행"
    }
  },
  "size": 10, 
  "aggs": {
    "b_1": {
      "terms": {
        "field": "customers"
      }
    }
  }
}

# branch별 유니크한 자료들 출력
GET bank/_search
{
  "size": 0, 
  "aggs": {
    "b_2": {
      "cardinality": {
        "field": "branch.keyword"
      }
    }
  }
}

# 국민은행 고객들에 대한 집계 자료 출력
GET bank/_search
{
  "query": {
    "match": {
      "bank": "국민은행"
    }
  },
  "size": 0, 
  "aggs": {
    "b_3": {
      "stats": {
        "field": "customers"
      }
    }
  }
}

# 농협은행 고객 수 구간별(1000단위) 검색
GET bank/_search
{
  "query": {
    "match": {
      "bank": "NH농협은행"
    }
  },
  "size": 0, 
  "aggs": {
    "b_4": {
      "histogram": {
        "field": "customers",
        "interval": 1000
      }
    }
  }
}





